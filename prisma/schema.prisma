// Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  phone              String             @id @unique
  name               String
  email              String?
  profilePhotoUrl    String?
  address            String?
  pincode            String?
  cityState          String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  pointsBalance      Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  items              Item[]             @relation("UserItems")
  boughtTransactions Transaction[]      @relation("BuyerTransactions")
  soldTransactions   Transaction[]      @relation("SellerTransactions")
  pointsTransactions PointsTransaction[]
  verifications      Verification[]
}

model Item {
  id                  Int          @id @default(autoincrement()) // Changed from String to Int with autoincrement
  ownerPhone          String          // Updated to match the new User id type
  owner               User         @relation("UserItems", fields: [ownerPhone], references: [phone])
  title               String
  description         String
  brand               String?
  model               String?
  category            ItemCategory
  condition           ItemCondition
  ageYears            Int
  originalMsrp        Int
  estimatedMarketPrice Int
  pointsValue         Int
  accessoriesIncluded Json?
  images              Json
  locationPincode     String
  status              ItemStatus   @default(AVAILABLE)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  transaction         Transaction?
}

model Transaction {
  id                 Int          @id @default(autoincrement()) 
  buyerPhone         String          
  sellerPhone        String          
  itemId             Int @unique  
  shippingCostPaid   Int
  status             TransactionStatus @default(PENDING)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  // E-waste impact
  ewasteKg              Float
  leadGrams             Float
  mercuryMilligrams     Float
  cadmiumMilligrams     Float
  lithiumGrams          Float
  plasticGrams          Float
  glassGrams            Float
  rareEarthGrams        Float

  // Relationships
  buyer              User         @relation("BuyerTransactions", fields: [buyerPhone], references: [phone])
  seller             User         @relation("SellerTransactions", fields: [sellerPhone], references: [phone])
  item               Item         @relation(fields: [itemId], references: [id])

}

model PointsTransaction {
  id            Int          @id @default(autoincrement()) // Changed from String to Int with autoincrement
  userId        String          // Updated to match the new User id type
  user          User         @relation(fields: [userId], references: [phone])
  type          PointsChangeType
  pointsChange  Int
  source        String?
  createdAt     DateTime     @default(now())
}

model Verification {
  id         Int          @id @default(autoincrement()) // Changed from String to Int with autoincrement
  userId     String          // Updated to match the new User id type
  user       User         @relation(fields: [userId], references: [phone])
  method     VerificationMethod
  status     VerificationStatus
  documentUrl String?
  createdAt  DateTime     @default(now())
}

// ENUMS
enum VerificationStatus {
  UNVERIFIED
  EMAIL_VERIFIED
  ID_VERIFIED
}

enum VerificationMethod {
  EMAIL
  PHONE
  GOVERNMENT_ID
}

enum ItemCategory {
  PHONE
  LAPTOP
  TABLET
  ACCESSORIES
  WEARABLES
  AUDIO
  GAMING
  COMPONENTS
  CABLES
  CAMERA
  OTHER
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum ItemStatus {
  AVAILABLE
  RESERVED
  SHIPPED
  COMPLETED
  CANCELED
}

enum TransactionStatus {
  PENDING
  SHIPPING_IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PointsChangeType {
  EARN
  SPEND
  BONUS
  PURCHASE
}
