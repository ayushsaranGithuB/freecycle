API Security Audit (May 2025)

1. /api/purchases/route.ts
- Security: Uses auth() for both POST and GET. Checks session and user id.
- Issues: Relies on session, but does not check for Bearer token/JWT in Authorization header. User id is passed in body/query, which can be spoofed if session is compromised.
- Suggestions:
  * Support Bearer token/JWT in Authorization header for stateless auth.
  * Always extract user id from session/JWT, never trust userId in body/query.
  * Consider CSRF protection for POST.

2. /api/listings/route.ts
- Security: No authentication for GET or POST. Anyone can create listings.
- Issues: No user validation, owner is passed in body and can be spoofed.
- Suggestions:
  * Require auth() for POST, extract user id from session/JWT, ignore owner in body.
  * Support Bearer token/JWT for API clients.

3. /api/estimate-shipping/route.ts
- Security: No authentication.
- Issues: Anyone can estimate shipping, which may be fine if public, but could be abused.
- Suggestions:
  * If abuse is a concern, require auth() or rate limit.

4. /api/user/points/route.ts
- Security: No authentication for POST or GET. userId is passed in body/query.
- Issues: Anyone can update or read any user's points.
- Suggestions:
  * Require auth() for both POST and GET.
  * Extract user id from session/JWT, ignore userId in body/query.
  * Support Bearer token/JWT.

5. /api/listings/[id]/route.ts
- Security: No authentication for GET, PATCH, or DELETE.
- Issues: Anyone can update or delete any listing.
- Suggestions:
  * Require auth() for PATCH and DELETE.
  * Check that the authenticated user is the owner of the listing.
  * Support Bearer token/JWT.

6. /api/user/[userId]/route.ts
- Security: No authentication for GET or PUT. userId is in params.
- Issues: Anyone can read or update any user's profile.
- Suggestions:
  * Require auth() for both GET and PUT.
  * Only allow access if session/JWT user id matches userId param.
  * Support Bearer token/JWT.

7. /api/user/update-profile/route.ts
- Security: No authentication. phone is passed in body.
- Issues: Anyone can update any user's profile.
- Suggestions:
  * Require auth().
  * Extract user id from session/JWT, ignore phone in body.
  * Support Bearer token/JWT.

8. /api/invoice/[transactionId]/route.ts
- Security: No authentication for GET.
- Issues: Anyone can fetch any invoice/transaction.
- Suggestions:
  * Require auth().
  * Only allow access if user is buyer or seller in transaction.
  * Support Bearer token/JWT.

9. /api/listings/[id]/delete-image/route.ts
- Security: No authentication.
- Issues: Anyone can delete images from any listing.
- Suggestions:
  * Require auth().
  * Only allow if user is owner of the listing.
  * Support Bearer token/JWT.

10. /api/auth/signup/route.ts
- Security: No authentication (expected for signup/OTP).
- Issues: None for signup, but ensure rate limiting to prevent abuse.
- Suggestions:
  * Add rate limiting.

11. /api/auth/[...nextauth]/route.ts
- Security: Handled by next-auth.
- Issues: None.
- Suggestions: N/A

General Recommendations:
- Use auth() in all routes that modify or access user data.
- Support Bearer token/JWT in Authorization header for stateless API access.
- Never trust userId/phone in body/query/params; always extract from session/JWT.
- Add CSRF protection for state-changing routes if using cookies.
- Add rate limiting to public endpoints (e.g., signup, estimate-shipping).

---
Fix each route as per the above suggestions for robust security.
